/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  NFTBridgeSetup,
  NFTBridgeSetupInterface,
} from "../../../contracts/nft/NFTBridgeSetup";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "MIN_LOCK_TIME",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "chainId",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "zkBridge",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenImplementation",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "lockTime",
        type: "uint256",
      },
    ],
    name: "setup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103d1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806323045ae61461003b5780633ff0320714610050575b600080fd5b61004e6100493660046102a6565b61006c565b005b61005a6201518081565b60405190815260200160405180910390f35b600280546001600160a01b0319166001600160a01b038416179055600a805461ffff191661ffff8716179055600080546001600160a01b0319166001600160a01b0386161790556100bc81600555565b600180546001600160a01b0319166001600160a01b0385161790556100e08661019c565b60408051600481526024810182526020810180516001600160e01b031663204a7f0760e21b179052905160009182916001600160a01b038a16916101239161034c565b600060405180830381855af49150503d806000811461015e576040519150601f19603f3d011682016040523d82523d6000602084013e610163565b606091505b50915091508181906101915760405162461bcd60e51b81526004016101889190610368565b60405180910390fd5b505050505050505050565b6101a5816101dc565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381163b6102495760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610188565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b03811681146102a157600080fd5b919050565b60008060008060008060c087890312156102bf57600080fd5b6102c88761028a565b9550602087013561ffff811681146102df57600080fd5b94506102ed6040880161028a565b93506102fb6060880161028a565b92506103096080880161028a565b915060a087013590509295509295509295565b60005b8381101561033757818101518382015260200161031f565b83811115610346576000848401525b50505050565b6000825161035e81846020870161031c565b9190910192915050565b602081526000825180602084015261038781604085016020870161031c565b601f01601f1916919091016040019291505056fea26469706673582212205556461825b557754183a91e3e8de928a89f3a5cd4d277e251db1a47b1b05b1f64736f6c634300080e0033";

type NFTBridgeSetupConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTBridgeSetupConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTBridgeSetup__factory extends ContractFactory {
  constructor(...args: NFTBridgeSetupConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTBridgeSetup> {
    return super.deploy(overrides || {}) as Promise<NFTBridgeSetup>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTBridgeSetup {
    return super.attach(address) as NFTBridgeSetup;
  }
  override connect(signer: Signer): NFTBridgeSetup__factory {
    return super.connect(signer) as NFTBridgeSetup__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTBridgeSetupInterface {
    return new utils.Interface(_abi) as NFTBridgeSetupInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTBridgeSetup {
    return new Contract(address, _abi, signerOrProvider) as NFTBridgeSetup;
  }
}
