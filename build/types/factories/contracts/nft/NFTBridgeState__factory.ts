/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  NFTBridgeState,
  NFTBridgeStateInterface,
} from "../../../contracts/nft/NFTBridgeState";

const _abi = [
  {
    inputs: [],
    name: "MIN_LOCK_TIME",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50607e8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633ff0320714602d575b600080fd5b60366201518081565b60405190815260200160405180910390f3fea26469706673582212207739dcb5542b351e9d4627810ff1e9cc50166c94bd72339077b733d5fb397bdf64736f6c634300080e0033";

type NFTBridgeStateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTBridgeStateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTBridgeState__factory extends ContractFactory {
  constructor(...args: NFTBridgeStateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTBridgeState> {
    return super.deploy(overrides || {}) as Promise<NFTBridgeState>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTBridgeState {
    return super.attach(address) as NFTBridgeState;
  }
  override connect(signer: Signer): NFTBridgeState__factory {
    return super.connect(signer) as NFTBridgeState__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTBridgeStateInterface {
    return new utils.Interface(_abi) as NFTBridgeStateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTBridgeState {
    return new Contract(address, _abi, signerOrProvider) as NFTBridgeState;
  }
}
