/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface NFTBridgeInterface extends utils.Interface {
  functions: {
    "MIN_LOCK_TIME()": FunctionFragment;
    "bridgeContracts(uint16)": FunctionFragment;
    "chainId()": FunctionFragment;
    "confirmContractUpgrade()": FunctionFragment;
    "fee(uint16)": FunctionFragment;
    "isInitialized(address)": FunctionFragment;
    "isWrappedAsset(address)": FunctionFragment;
    "lockTime()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingImplementation()": FunctionFragment;
    "registerChain(uint16,address)": FunctionFragment;
    "setFee(uint16,uint256)": FunctionFragment;
    "setLockTime(uint256)": FunctionFragment;
    "setWrappedAsset(uint16,bytes32,address)": FunctionFragment;
    "setZkBridge(address)": FunctionFragment;
    "submitContractUpgrade(address)": FunctionFragment;
    "toUpdateTime()": FunctionFragment;
    "tokenImplementation()": FunctionFragment;
    "transferNFT(address,uint256,uint16,bytes32)": FunctionFragment;
    "wrappedAsset(uint16,bytes32)": FunctionFragment;
    "zkBridge()": FunctionFragment;
    "zkReceive(uint16,address,uint64,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MIN_LOCK_TIME"
      | "bridgeContracts"
      | "chainId"
      | "confirmContractUpgrade"
      | "fee"
      | "isInitialized"
      | "isWrappedAsset"
      | "lockTime"
      | "onERC721Received"
      | "owner"
      | "pendingImplementation"
      | "registerChain"
      | "setFee"
      | "setLockTime"
      | "setWrappedAsset"
      | "setZkBridge"
      | "submitContractUpgrade"
      | "toUpdateTime"
      | "tokenImplementation"
      | "transferNFT"
      | "wrappedAsset"
      | "zkBridge"
      | "zkReceive"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MIN_LOCK_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeContracts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "confirmContractUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWrappedAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "lockTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerChain",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedAsset",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setZkBridge",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitContractUpgrade",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "toUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedAsset",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "zkBridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zkReceive",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_LOCK_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmContractUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWrappedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZkBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitContractUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zkBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zkReceive", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ContractUpgraded(address,address)": EventFragment;
    "NewPendingImplementation(address,address)": EventFragment;
    "ReceiveNFT(uint64,address,address,uint256,uint16,uint16,address)": EventFragment;
    "RegisterChain(uint16,address)": EventFragment;
    "TransferNFT(uint64,address,uint256,uint16,address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingImplementation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiveNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterChain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ContractUpgradedEventObject {
  oldContract: string;
  newContract: string;
}
export type ContractUpgradedEvent = TypedEvent<
  [string, string],
  ContractUpgradedEventObject
>;

export type ContractUpgradedEventFilter =
  TypedEventFilter<ContractUpgradedEvent>;

export interface NewPendingImplementationEventObject {
  pendingImplementation: string;
  newImplementation: string;
}
export type NewPendingImplementationEvent = TypedEvent<
  [string, string],
  NewPendingImplementationEventObject
>;

export type NewPendingImplementationEventFilter =
  TypedEventFilter<NewPendingImplementationEvent>;

export interface ReceiveNFTEventObject {
  sequence: BigNumber;
  sourceToken: string;
  token: string;
  tokenID: BigNumber;
  sourceChain: number;
  sendChain: number;
  recipient: string;
}
export type ReceiveNFTEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, number, number, string],
  ReceiveNFTEventObject
>;

export type ReceiveNFTEventFilter = TypedEventFilter<ReceiveNFTEvent>;

export interface RegisterChainEventObject {
  chainId: number;
  nftBridge: string;
}
export type RegisterChainEvent = TypedEvent<
  [number, string],
  RegisterChainEventObject
>;

export type RegisterChainEventFilter = TypedEventFilter<RegisterChainEvent>;

export interface TransferNFTEventObject {
  sequence: BigNumber;
  token: string;
  tokenID: BigNumber;
  recipientChain: number;
  sender: string;
  recipient: string;
}
export type TransferNFTEvent = TypedEvent<
  [BigNumber, string, BigNumber, number, string, string],
  TransferNFTEventObject
>;

export type TransferNFTEventFilter = TypedEventFilter<TransferNFTEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface NFTBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_LOCK_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    bridgeContracts(
      chainId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    chainId(overrides?: CallOverrides): Promise<[number]>;

    confirmContractUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fee(
      destChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWrappedAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingImplementation(overrides?: CallOverrides): Promise<[string]>;

    registerChain(
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      destChainId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLockTime(
      lockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWrappedAsset(
      tokenChainId_: PromiseOrValue<BigNumberish>,
      tokenAddress_: PromiseOrValue<BytesLike>,
      wrapper_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setZkBridge(
      zkBridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitContractUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenImplementation(overrides?: CallOverrides): Promise<[string]>;

    transferNFT(
      token: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wrappedAsset(
      tokenChainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    zkBridge(overrides?: CallOverrides): Promise<[string]>;

    zkReceive(
      srcChainId: PromiseOrValue<BigNumberish>,
      srcAddress: PromiseOrValue<string>,
      sequence: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MIN_LOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  bridgeContracts(
    chainId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  chainId(overrides?: CallOverrides): Promise<number>;

  confirmContractUpgrade(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fee(
    destChainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isInitialized(
    impl: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWrappedAsset(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockTime(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    operator: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingImplementation(overrides?: CallOverrides): Promise<string>;

  registerChain(
    chainId: PromiseOrValue<BigNumberish>,
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    destChainId: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLockTime(
    lockTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWrappedAsset(
    tokenChainId_: PromiseOrValue<BigNumberish>,
    tokenAddress_: PromiseOrValue<BytesLike>,
    wrapper_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setZkBridge(
    zkBridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitContractUpgrade(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  tokenImplementation(overrides?: CallOverrides): Promise<string>;

  transferNFT(
    token: PromiseOrValue<string>,
    tokenID: PromiseOrValue<BigNumberish>,
    recipientChain: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wrappedAsset(
    tokenChainId: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  zkBridge(overrides?: CallOverrides): Promise<string>;

  zkReceive(
    srcChainId: PromiseOrValue<BigNumberish>,
    srcAddress: PromiseOrValue<string>,
    sequence: PromiseOrValue<BigNumberish>,
    payload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MIN_LOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeContracts(
      chainId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    chainId(overrides?: CallOverrides): Promise<number>;

    confirmContractUpgrade(overrides?: CallOverrides): Promise<void>;

    fee(
      destChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWrappedAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingImplementation(overrides?: CallOverrides): Promise<string>;

    registerChain(
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      destChainId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockTime(
      lockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWrappedAsset(
      tokenChainId_: PromiseOrValue<BigNumberish>,
      tokenAddress_: PromiseOrValue<BytesLike>,
      wrapper_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setZkBridge(
      zkBridge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitContractUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    toUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    tokenImplementation(overrides?: CallOverrides): Promise<string>;

    transferNFT(
      token: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrappedAsset(
      tokenChainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    zkBridge(overrides?: CallOverrides): Promise<string>;

    zkReceive(
      srcChainId: PromiseOrValue<BigNumberish>,
      srcAddress: PromiseOrValue<string>,
      sequence: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "ContractUpgraded(address,address)"(
      oldContract?: PromiseOrValue<string> | null,
      newContract?: PromiseOrValue<string> | null
    ): ContractUpgradedEventFilter;
    ContractUpgraded(
      oldContract?: PromiseOrValue<string> | null,
      newContract?: PromiseOrValue<string> | null
    ): ContractUpgradedEventFilter;

    "NewPendingImplementation(address,address)"(
      pendingImplementation?: PromiseOrValue<string> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): NewPendingImplementationEventFilter;
    NewPendingImplementation(
      pendingImplementation?: PromiseOrValue<string> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): NewPendingImplementationEventFilter;

    "ReceiveNFT(uint64,address,address,uint256,uint16,uint16,address)"(
      sequence?: PromiseOrValue<BigNumberish> | null,
      sourceToken?: null,
      token?: null,
      tokenID?: null,
      sourceChain?: null,
      sendChain?: null,
      recipient?: null
    ): ReceiveNFTEventFilter;
    ReceiveNFT(
      sequence?: PromiseOrValue<BigNumberish> | null,
      sourceToken?: null,
      token?: null,
      tokenID?: null,
      sourceChain?: null,
      sendChain?: null,
      recipient?: null
    ): ReceiveNFTEventFilter;

    "RegisterChain(uint16,address)"(
      chainId?: null,
      nftBridge?: null
    ): RegisterChainEventFilter;
    RegisterChain(chainId?: null, nftBridge?: null): RegisterChainEventFilter;

    "TransferNFT(uint64,address,uint256,uint16,address,address)"(
      sequence?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      tokenID?: null,
      recipientChain?: null,
      sender?: null,
      recipient?: null
    ): TransferNFTEventFilter;
    TransferNFT(
      sequence?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      tokenID?: null,
      recipientChain?: null,
      sender?: null,
      recipient?: null
    ): TransferNFTEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    MIN_LOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeContracts(
      chainId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    confirmContractUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fee(
      destChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWrappedAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    registerChain(
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      destChainId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLockTime(
      lockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWrappedAsset(
      tokenChainId_: PromiseOrValue<BigNumberish>,
      tokenAddress_: PromiseOrValue<BytesLike>,
      wrapper_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setZkBridge(
      zkBridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitContractUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    tokenImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    transferNFT(
      token: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wrappedAsset(
      tokenChainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zkBridge(overrides?: CallOverrides): Promise<BigNumber>;

    zkReceive(
      srcChainId: PromiseOrValue<BigNumberish>,
      srcAddress: PromiseOrValue<string>,
      sequence: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_LOCK_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeContracts(
      chainId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirmContractUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fee(
      destChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWrappedAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerChain(
      chainId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      destChainId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLockTime(
      lockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWrappedAsset(
      tokenChainId_: PromiseOrValue<BigNumberish>,
      tokenAddress_: PromiseOrValue<BytesLike>,
      wrapper_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setZkBridge(
      zkBridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitContractUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferNFT(
      token: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wrappedAsset(
      tokenChainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zkBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zkReceive(
      srcChainId: PromiseOrValue<BigNumberish>,
      srcAddress: PromiseOrValue<string>,
      sequence: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
